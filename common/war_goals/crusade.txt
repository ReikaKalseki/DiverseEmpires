wg_dragon = {
	# Required, the actor must have a Casus Belli against the target
	casus_belli = cb_crusade

	# If used as attacker wargoal and set, defender will have their wargoal predetermined by this
	# If not set, defender gets to pick their own wargoal
	#set_defender_wargoal = wg_example
	
	icon = "gfx/interface/icons/diplomacy/wargoal_crusade.dds" ## Links to this icon in the Stellaris graphical resources folder.

	# Defenders get this war goal if no war goal is picked in time. If multiple war goals are set to
	# be defender default, the first one scripted in the file is chosen.
	defender_default = no # Default no

 	# Affects threat generated by conquering systems & planets
	threat_multiplier = 5.0 # Default 1.0

	# Hide this wargoal if country doesn't have the requisite CB
	hide_if_no_cb = yes	# Default no

	# Cede claims on peace?
	cede_claims = no #yes/occupied_only/no

	# This affects how likely the AI is to surrender to this wargoal, generally less willing on more severe wargoals (negative numbers = less willing)
	surrender_acceptance = -400 # Default 0

	# This affects how quickly war exhaustion builds up for this side in the war (2.0 = twice as fast)
	war_exhaustion = 0.01 # Default 1.0

	# This decides whether claims should be listed in the description
	#show_claims_in_description = yes # Default no

	# FROM = The targeted country
	# THIS = The acting country
	potential = {
		this = {
			has_valid_civic = civic_crusader
		}
		from = {
			NOR = {
				has_country_flag = skeru
				has_valid_civic = civic_crusader
			}
		}
	}
	possible = {
		this = {
			has_valid_civic = civic_crusader
		}
		from = {
			NOR = {
				has_country_flag = skeru
				has_valid_civic = civic_crusader
			}
		}
	}
	
	# Run when war ends in status quo
	on_status_quo = {

	}
	
	# Run when target surrenders after claims are ceded
	on_accept = {
		custom_tooltip = wg_crusade_accept
		from = { copy_ethos_and_authority = root }
		from = {
			change_government = {
				civics = {
					civic = civic_cult
					civic = civic_religious_oppression
				}
			} 
		}
		root = {
			set_timed_country_flag = {flag = recently_crusaded_someone days = 900} #2.5y
		}
		from = {
			set_timed_country_flag = {flag = recently_crusaded days = 180} #0.5y
		}
		from = { add_modifier = { modifier = recently_crusaded days = -1 } }		
		add_opinion_modifier = { modifier = opinion_we_crusaded who = from }	
		from = { add_opinion_modifier = { modifier = opinion_crusaded_us who = root } }
		#end_rivalry = from
		#from = { end_rivalry = root }	
		from = {
			leave_alliance = { override_requirements = yes }
		}
		from = {
			kill_leader = {
				type = ruler
				show_notification = no
			}
			kill_leader = {
				type = ruler
				show_notification = no
				heir = yes
			}
		}
		from = {
			create_leader = {
				type = governor
				species = owner_main_species
				name = random
				skill = 1
			}
			assign_leader = last_created_leader
		}
		from = {
			every_owned_planet = {
				every_tile = {
					if = {
						limit = {
							OR = {
								has_building = building_basic_science_lab_1
								has_building = building_physics_lab_1
								has_building = building_biolab_1
								has_building = building_engineering_facility_1
								has_building = building_physics_lab_2
								has_building = building_biolab_2
								has_building = building_engineering_facility_2
								has_building = building_physics_lab_3
								has_building = building_biolab_3
								has_building = building_engineering_facility_3
								has_building = building_physics_lab_4
								has_building = building_biolab_4
								has_building = building_engineering_facility_4
							}
						}
						set_ruined = yes
					}
				}
			}
		}
		from = {
			every_owned_pop = {
				if = {
					limit = {pop_has_ethic = ethic_spiritualist}
					random_list = {15 = {kill_pop = yes} 85 = {}}
				}
				else = {
					random_list = {85 = {kill_pop = yes} 15 = {}}
				}
			}
		}
		root = {add_influence = 250}
	}

}
